# -*- coding: utf-8 -*-
"""Histogram_Equaliser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ATGMz0jLHbesj775ErSV-oSSoWHaI9CQ
"""

import numpy as np
import pandas as pd
import cv2 as cv 
from google.colab.patches import cv2_imshow # for image display
from skimage import io
import matplotlib.pylab as plt


url = "https://thumbs.dreamstime.com/b/christmas-lights-raised-night-horizon-city-houses-around-lampposts-varied-lighting-addition-to-some-palm-112537572.jpg"
myImg = io.imread(url)  
cv2_imshow(cv.cvtColor(myImg, cv.COLOR_BGR2RGB))


myGrayImg = cv.cvtColor(myImg, cv.COLOR_BGR2GRAY)
cv2_imshow(myGrayImg)




def HistEqualization(image, number_bins = 256):
  """ Histogram equalization of a grayscale image.  """
  # get the image histogram
  image_Hist, bins = np.histogram(image.flatten(), number_bins, [0, 256])
  cdf = image_Hist.cumsum() # cumulative distribution function
  cdf = image_Hist.max()*cdf/cdf.max()  #normalize
  cdf_mask = np.ma.masked_equal(cdf, 0)
  cdf_mask = (cdf_mask - cdf_mask.min())*255/(cdf_mask.max()-cdf_mask.min())
  cdf = np.ma.filled(cdf_mask,0).astype('uint8')
  return cdf[image.astype('uint8')]

# apply the function on your dark image to increase the contrast
# we could observe that the contrast of the black background has increased
HEG_image = HistEqualization(myGrayImg)
cv2_imshow(HEG_image)

plt.hist(myGrayImg.ravel(),bins = 256, range = [0, 256])
plt.show()

plt.hist(HEG_image.ravel(),bins = 256, range = [0, 256])
plt.show()